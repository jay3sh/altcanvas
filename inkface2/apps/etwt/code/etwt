
#!/usr/bin/env python

import os
import sys
import getopt
import pickle

from inkface.evas import EFace, ECanvas
from etwtlib.textbox import TextBox
from etwtlib.keyboard import Keyboard
from etwtlib.twt import Twt
from etwtlib.utils import encrypt,decrypt

from urllib2 import HTTPError

TWITINK_RC      = os.environ['HOME']+os.sep+'.twitinkrc'
PREFIX      = '..'
SVG_DIR     = os.path.join(PREFIX,'svg')

class KeyFocus:
    loseFocus = None
    def get(self, callback):
        if self.loseFocus is not None:
            self.loseFocus()
        self.loseFocus = callback
        return True

    def put(self):
        self.loseFocus = None
        
class App:
    FRAMERATE=60
    def main(self, theme='default'):
        #try:
        self.theme = theme
        self.entry = EFace(
            os.path.join(SVG_DIR,self.theme,'entry.svg'))
    
        canvas = ECanvas(
                    (int(float(self.entry.svg.width)),
                        int(float(self.entry.svg.height))),
                    framerate = self.FRAMERATE)
    
        self.entry.load_elements(canvas)

        self.entry.waitIcon.hide()
        self.entry.authfailIcon.hide()

        self.kbd = Keyboard(
            os.path.join(SVG_DIR, self.theme, 'keyboard.svg'), canvas)
        self.kbd.hide()

        self.uname = TextBox(
                parentApp   = self,
                border_elem = self.entry.uname_border,
                txt_elem    = self.entry.uname_txt,
                cursor_elem = self.entry.uname_cursor,
                focus_elem  = self.entry.uname_borderfocus,
                framerate   = self.FRAMERATE,
                kbd         = self.kbd)

        self.passwd = TextBox(
                parentApp   = self,
                border_elem = self.entry.passwd_border,
                txt_elem    = self.entry.passwd_txt,
                cursor_elem = self.entry.passwd_cursor,
                focus_elem  = self.entry.passwd_borderfocus,
                framerate   = self.FRAMERATE,
                mask        = '*',
                kbd         = self.kbd)

        self.entry.loginButton.onLeftClick = self.doLogin

        self.entry.exitButton.onLeftClick = self.Exit

        self.keyfocus = KeyFocus()

        try:
            username, password = self.load_config()
        except:
            username = None
            password = None

        if username and password:
            self.uname.set_text(username)
            self.passwd.set_text(password)


        canvas.eventloop()
        
        #except Exception, e:
        #print 'Caught Exception: '+str(e)
        #import traceback
        #print traceback.format_exc()
        #sys.exit(0)
        #raise e

    def doLogin(self, elem):
        username = self.uname.get_text()
        password = self.passwd.get_text()

        try:
            self.entry.authfailIcon.hide()
            self.entry.waitIcon.unhide()
            twt = Twt(username, password, self.theme, self.canvas)
        except HTTPError, hter:
            self.entry.waitIcon.hide()
            self.entry.authfailIcon.unhide()
            return

        # Login was successful, let's save credentials.
        self.save_config(username, password)

        self.entry.waitIcon.hide()

        self.canvas.remove(self.entry)

        twt.load()

    def Exit(self, elem):
        sys.exit(0)

    def load_config(self):
        config = None
        try:
            pfile = open(TWITINK_RC,'r')
            config = pickle.load(pfile)
        except IOError,ioe:
            print '.twitinkrc file not found'

        if config:
            return(config['username'],decrypt(config['password']))

    def save_config(self, username, password):
        pfile = open(TWITINK_RC,'w')
        m = {}
        m['username'] = username
        m['password'] = encrypt(password)
        pickle.dump(m,pfile)


    

def usage():
    print 'Twitter Inkface client:'
    print ' twitink.py [options]'
    print ' '
    print ' -t --theme  : Theme to use for the app'
    print ' -h --help   : usage'
   
if __name__ == '__main__':
    try:
        optlist, args = getopt.getopt(sys.argv[1:],'ht:',['help','theme='])
    except getopt.GetoptError, err:
        print str(err)
        usage()
        sys.exit(0)

    theme = 'default'
    for o,a in optlist:
        if o in ('-h','--help'):
            usage()
            break
        elif o in ('-t','--theme'):
            theme = a
 
    App().main(theme=theme)

